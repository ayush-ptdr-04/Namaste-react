<!-- Routing -->

Q: What would happen if we do console.log(useState())?
A: If we do console.log(useState()), we get an array [undefined, function] where first item in an array is state is undefined and the second item in an array is setState function is bound dispatchSetState.

Q: How will useEffect behave if we don't add a dependency array?

<!-- useEffect(() => {
.......
}, []); -->

Case: 1. - When the dependency array is not included in the arguments of useEffect() hook, the callback function will be executed every time the component is rendered and re-rendered.

  <!-- useEffect(() => {
  console.log("I run everytime this component rerenders")
  }); -->

Case:- 2 When the dependency array is empty in the arguments of useEffect() hook, the callback function will be executed only one time during the initial render of the component.

<!-- useEffect(() => {
console.log("I Only run once (When the component gets mounted)")
}, []); -->

Case:- 3. - When the dependency array contains a condition, the callback function will be executed one time during the initial render of the component and also rerender if there is a change in the condition.

<!-- useEffect(() => {
	console.log("I run every-time when my condition changed")
}, [condition]); -->

# Routing: Routing ko simple words mein samjhaun, toh yeh ek tarika hai jisse hum decide karte hain ki konsa content (ya page) kis URL par display hoga. Jaise agar aap kisi website par jaate hain aur Home, About, ya Contact page par click karte hain, toh routing hi decide karti hai ki aapko konsa page dikhaya jaye.

# npm i react-router-dom

- Routing in Web Development:
- Client-Side Routing: Ye frontend (browser) mein hota hai. Jaise React, Angular, ya Vue.js mein.
  Example: Agar aap /about par jaate hain, toh page reload nahi hota, bas content change hota hai.
- Server-Side Routing: Ye backend (server) mein hota hai. Jaise Express.js (Node.js) mein.
  Example: Agar aap /about par jaate hain, toh server naya page bhejta hai.

# React (Single-Page Applications (SPA)): Page reload nahi hota, bas content change hota hai.

`js import { createBrowserRouter, RouterProvider } from "react-router-dom"; `
1Ô∏è‚É£ createBrowserRouter
Ye ek router banata hai jo Browser ke URL ke basis pe routes handle karta hai.

<!-- // 1Ô∏è‚É£ Router banaya
const appRouter = createBrowserRouter([
  { path: "/", element: <Home /> }, // / pe Home component show hoga
  { path: "/about", element: <About /> }, // /about pe About component show hoga
  { path: "/contact", element: <Contact /> }, // /contact pe Contact component show hoga
]); -->

2Ô∏è‚É£ RouterProvider
Yani createBrowserRouter se jo router bana hai, usko React ke andar enable karne ke liye RouterProvider ka use hota hai.

<!-- const App = () => {
  return (
    // 2Ô∏è‚É£ RouterProvider me router pass kiya
    <RouterProvider router={appRouter} />
  );
}; -->

# import { createBrowserRouter, RouterProvider, Outlet } from "react-router-dom";

1Ô∏è‚É£ createBrowserRouter([])

- Ye ek router create karta hai jo browser ke URL ko handle karta hai.
- Isme ek array of objects hota hai jisme routes (pages) define ki jati hain.
- Har route ka path (URL) aur component (page ka UI) hota hai.
- Agar user kisi path par jata hai, to uska corresponding component render hota hai.

```js
const appRouter = createBrowserRouter([
  {
    path: "/", // Home Page ka path
    element: <AppLayout />, // Is path par ye component dikhega
    children: [
      { path: "/", element: <Body /> }, // Home page ka content
      { path: "/about", element: <About /> }, // About page ka content
      { path: "/contact", element: <Contact /> }, // Contact page ka content
    ],
    errorElement: <Error />, // Agar koi galat URL enter kare to Error Page dikhe
  },
]);
```

2Ô∏è‚É£ RouterProvider

- Ye React ke andar routing ko activate karta hai.
- Jo router create kiya hai (appRouter), usko RouterProvider ke andar pass karte hain.
- Isse application ke andar routing ka system enable ho jata hai.

```js
root.render(<RouterProvider router={appRouter} />);
```

3Ô∏è‚É£ Outlet

- Ye children routes ko parent component ke andar dikhane ka kaam karta hai.
- Jab AppLayout parent component hai, aur Body, About, Contact child components hain, to Outlet waha par child component ko dikhata hai.
- Jab user "/about" par jata hai, to About component Outlet ke andar render ho jata hai.

```js
const AppLayout = () => {
  return (
    <div className="app">
      <Header /> {/* Yeh hamesha dikhega */}
      <Outlet /> {/* Yeh change hoga based on URL */}
    </div>
  );
};
```

üîπ createBrowserRouter ‚Üí Sare pages (routes) ko define karta hai.
üîπ RouterProvider ‚Üí React me routing enable karta hai.
üîπ Outlet ‚Üí Jo bhi page active hai, use render karta hai.

# Tow types of routing

A: - In Server-side routing or rendering (SSR), every change in URL, http request is made to server to fetch the webpage, and replace the current webpage with the older one.

- In Client-side routing or rendering (CSR), during the first load, the webapp is loaded from server to client, after which whenever there is a change in URL, the router library navigates the user to the new page without sending any request to backend. All Single Page Applications uses client-side routing.

# hook: useRouteError for custmize error

# whenever using map() always use a key

        ```js
        <ul>
        {itemCards.map((item) => {
          <li key={item.id}>{item.action.text}</li>
        })}
      </ul>
      ```

# mene restaurnat-Menu-itmes-card ke liye API lecture-7 ko dekh kr usme se copy ki hai same to same
